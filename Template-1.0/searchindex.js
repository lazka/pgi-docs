Search.setIndex({"docnames": ["callbacks", "class-structs", "classes", "classes/Expr", "classes/Scope", "classes/Symbol", "classes/Template", "classes/TemplateClass", "classes/TemplateLocator", "classes/TemplateLocatorClass", "constants", "enums", "functions", "hierarchy", "index", "mapping", "structs", "unions"], "filenames": ["callbacks.rst", "class-structs.rst", "classes.rst", "classes/Expr.rst", "classes/Scope.rst", "classes/Symbol.rst", "classes/Template.rst", "classes/TemplateClass.rst", "classes/TemplateLocator.rst", "classes/TemplateLocatorClass.rst", "constants.rst", "enums.rst", "functions.rst", "hierarchy.rst", "index.rst", "mapping.rst", "structs.rst", "unions.rst"], "titles": ["Callbacks", "Class Structures", "Classes", "Template.Expr", "Template.Scope", "Template.Symbol", "Template.Template", "Template.TemplateClass", "Template.TemplateLocator", "Template.TemplateLocatorClass", "Constants", "Enums", "Functions", "Hierarchy", "Template 1.0 (3.36.1)", "Symbol Mapping", "Structures", "Unions"], "terms": {"scoperesolv": [0, 4, 15], "scope": [0, 3, 6, 14, 15, 16], "name": [0, 3, 4, 6, 7, 8, 9], "symbol": [0, 3, 4, 6, 14, 16], "user_data": [0, 4], "templat": [0, 1, 2, 10, 11, 12, 13, 15, 16, 17], "paramet": [0, 3, 4, 5, 6, 8, 12], "str": [0, 3, 4, 5, 6, 8, 12], "object": [0, 4, 5, 6, 8, 9, 13], "none": [0, 3, 4, 5, 6, 7, 8, 9], "return": [0, 3, 4, 5, 6, 8, 11, 12], "type": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12], "bool": [0, 3, 4, 5, 6], "templateclass": [1, 6, 15], "templatelocatorclass": [1, 8, 15], "templateloc": [2, 6, 13, 15], "class": [3, 4, 5, 7, 9, 11, 14], "from_str": [3, 15], "new_boolean": [3, 15], "valu": [3, 4, 5, 6, 11, 15], "new_flow": [3, 15], "condit": 3, "primari": 3, "secondari": 3, "new_fn_cal": [3, 15], "builtin": 3, "param": [3, 5], "new_func": [3, 15], "symlist": 3, "list": [3, 5], "new_nop": [3, 15], "new_nul": [3, 15], "new_numb": [3, 15], "new_requir": [3, 15], "typelib": 3, "version": [3, 4, 10], "new_simpl": [3, 15], "left": 3, "right": 3, "new_stmt_list": [3, 15], "stmt": 3, "new_str": [3, 15], "length": 3, "new_symbol_assign": [3, 15], "new_symbol_ref": [3, 15], "new_user_fn_cal": [3, 15], "eval": [3, 15], "return_valu": 3, "new_anon_cal": [3, 15], "new_getattr": [3, 15], "attr": 3, "new_gi_cal": [3, 15], "new_invert_boolean": [3, 15], "new_setattr": [3, 15], "ref": [3, 4, 5, 15], "unref": [3, 4, 5, 15], "classmethod": [3, 4, 5, 6, 8, 11], "rais": [3, 6, 8, 12], "glib": [3, 4, 5, 6, 8, 10, 12, 14], "error": [3, 6, 8, 11, 12, 15], "exprtyp": [3, 11, 15], "exprbuiltin": [3, 11, 15], "float": [3, 4, 5], "ptrarrai": 3, "which": 3, "evalu": 3, "sequenc": 3, "new": [3, 4, 5, 6, 8, 15], "creat": [3, 4, 6], "statement": 3, "last": 3, "item": 3, "us": [3, 4, 6, 8, 10], "from": [3, 4, 8], "execut": 3, "3": [3, 4, 10, 11], "36": [3, 4, 10], "int": [3, 11, 12], "gobject": [3, 4, 5, 6, 7, 8, 9, 11, 13, 14], "dup_str": [4, 15], "get": [4, 6, 8, 15], "list_symbol": [4, 15], "recurs": 4, "new_with_par": [4, 15], "peek": [4, 15], "requir": [4, 6, 11, 15], "namespace_": 4, "set": [4, 5, 6, 8, 15], "set_boolean": [4, 15], "set_doubl": [4, 15], "set_nul": [4, 15], "set_object": [4, 15], "set_resolv": [4, 15], "resolv": [4, 6, 8], "set_str": [4, 15], "set_strv": [4, 15], "set_valu": [4, 15], "set_vari": [4, 15], "take": [4, 15], "A": [4, 5, 6, 8], "newli": [4, 6], "contain": [4, 6], "variabl": [4, 6], "custom": [4, 14], "express": [4, 14], "string": [4, 6, 8, 10, 11, 15], "i": [4, 5, 6, 8, 10], "otherwis": [4, 6], "If": [4, 5, 6], "could": 4, "found": [4, 8], "alloc": [4, 6], "parent": [4, 14], "should": [4, 6, 8], "includ": [4, 6, 8, 14], "an": [4, 6], "arrai": [4, 8], "all": [4, 6], "within": [4, 8], "self": 4, "inherit": [4, 6, 8], "namespac": 4, "import": 4, "true": [4, 6], "success": [4, 6], "fals": [4, 6], "so": 4, "can": [4, 8, 14], "alreadi": 4, "exist": 4, "overwritten": 4, "remov": 4, "match": 4, "strv": [4, 5], "content": 4, "variant": [4, 5], "ha": [4, 5], "refer": [4, 5, 6], "consum": [4, 5], "The": [4, 6, 8], "thi": [4, 8], "differ": 4, "ownership": 4, "assign_boolean": [5, 15], "v_bool": 5, "assign_doubl": [5, 15], "v_doubl": 5, "assign_object": [5, 15], "v_object": 5, "assign_str": [5, 15], "v_string": 5, "assign_strv": [5, 15], "assign_valu": [5, 15], "assign_vari": [5, 15], "v_variant": 5, "get_box": [5, 15], "get_expr": [5, 15], "get_symbol_typ": [5, 15], "get_valu": [5, 15], "hold": [5, 15], "expr": [5, 11, 12, 15, 17], "symboltyp": [5, 11, 15], "gtype": 5, "subclass": [6, 8], "37": [6, 8], "struct": [6, 8], "objectclass": [6, 7, 8, 9], "5": [6, 8, 11], "locat": [6, 8, 9, 15], "expand": [6, 15], "stream": [6, 8], "cancel": 6, "expand_str": [6, 15], "get_loc": [6, 15], "pars": [6, 14, 15], "parse_fil": [6, 15], "file": [6, 8], "parse_path": [6, 15], "path": [6, 8], "parse_resourc": [6, 15], "parse_str": [6, 15], "input": 6, "set_loc": [6, 15], "7": [6, 8, 11], "flag": 6, "short": 6, "descript": [6, 7, 8, 9, 14], "r": [6, 7, 8, 9], "w": 6, "c": [6, 15], "en": 6, "1": [6, 8, 10, 11], "access": [6, 7, 8, 9], "parent_inst": [6, 8, 9], "kwarg": [6, 8], "base": [6, 8, 11], "abstract": [6, 8], "No": [6, 8], "structur": [6, 8, 14], "specifi": [6, 8], "direct": [6, 8], "when": 6, "gio": [6, 8, 14], "outputstream": 6, "write": 6, "result": 6, "state": 6, "option": 6, "oper": 6, "provid": 6, "have": 6, "ar": 6, "you": [6, 14], "To": 6, "assign": 6, "tmpl_scope_assign_valu": 6, "similar": 6, "upon": 6, "failur": 6, "inputstream": [6, 8], "prop": 6, "default": 6, "readabl": 6, "writabl": 6, "construct": 6, "explicit_notifi": 6, "parent_class": 7, "append_search_path": [8, 15], "get_search_path": [8, 15], "prepend_search_path": [8, 15], "do_loc": 8, "tmpltemplateload": 8, "how": 8, "load": 8, "directli": 8, "your": 8, "code": 8, "compil": 8, "data": 8, "instanc": 8, "tmpl": 8, "see": 8, "more": [8, 14], "inform": 8, "termin": 8, "current": 8, "search": 8, "rel": 8, "loader": 8, "enable_trac": [10, 15], "log_level_trac": [10, 15], "major_vers": [10, 15], "micro_vers": [10, 15], "minor_vers": [10, 15], "version_": [10, 15], "0": [10, 11], "glibl": 10, "major": 10, "compon": 10, "e": 10, "g": 10, "tmpl_version": 10, "2": [10, 11, 14], "micro": 10, "minor": 10, "encod": 10, "print": [10, 11, 15], "concaten": 10, "genum": 11, "quark": [11, 15], "invalid_st": [11, 15], "symbol_redefin": [11, 15], "10": 11, "not_an_object": [11, 15], "11": 11, "null_point": [11, 15], "12": 11, "no_such_properti": [11, 15], "13": 11, "gi_failur": [11, 15], "14": 11, "runtime_error": [11, 15], "15": 11, "not_impl": [11, 15], "16": 11, "not_a_valu": [11, 15], "17": 11, "not_a_funct": [11, 15], "18": 11, "template_not_found": [11, 15], "circular_includ": [11, 15], "syntax_error": [11, 15], "4": 11, "lexer_failur": [11, 15], "type_mismatch": [11, 15], "6": 11, "invalid_op_cod": [11, 15], "divide_by_zero": [11, 15], "8": 11, "missing_symbol": [11, 15], "9": 11, "ab": [11, 15], "ceil": [11, 15], "sin": [11, 15], "tan": [11, 15], "co": [11, 15], "printerr": [11, 15], "cast_byt": [11, 15], "cast_char": [11, 15], "cast_i32": [11, 15], "cast_u32": [11, 15], "cast_i64": [11, 15], "cast_u64": [11, 15], "19": 11, "floor": [11, 15], "cast_float": [11, 15], "20": 11, "cast_doubl": [11, 15], "21": 11, "cast_bool": [11, 15], "22": 11, "hex": [11, 15], "log": [11, 15], "repr": [11, 15], "sqrt": [11, 15], "typeof": [11, 15], "assert": [11, 15], "add": [11, 15], "ne": [11, 15], "eq": [11, 15], "gte": [11, 15], "lte": [11, 15], "unary_minu": [11, 15], "stmt_list": [11, 15], "IF": [11, 15], "while": [11, 15], "symbol_ref": [11, 15], "symbol_assign": [11, 15], "sub": [11, 15], "fn_call": [11, 15], "anon_fn_cal": [11, 15], "user_fn_cal": [11, 15], "getattr": [11, 15], "23": 11, "setattr": [11, 15], "24": 11, "gi_cal": [11, 15], "25": 11, "26": 11, "AND": [11, 15], "27": 11, "OR": [11, 15], "28": 11, "invert_boolean": [11, 15], "29": 11, "mul": [11, 15], "arg": [11, 15], "30": 11, "func": [11, 15], "31": 11, "nop": [11, 15], "32": 11, "null": [11, 15], "33": 11, "div": [11, 15], "boolean": [11, 15], "number": [11, 15], "gt": [11, 15], "lt": [11, 15], "error_quark": [12, 15], "expr_from_str": [12, 15], "project": 14, "librari": 14, "simpl": 14, "format": 14, "along": 14, "integr": 14, "introspect": 14, "properti": 14, "method": 14, "It": 14, "separ": 14, "expans": 14, "faster": 14, "also": 14, "defin": 14, "function": 14, "embed": 14, "languag": 14, "homepag": 14, "http": 14, "peopl": 14, "gnome": 14, "org": 14, "chergert": 14, "doc": 14, "debian": 14, "packag": 14, "gir1": 14, "depend": 14, "callback": 14, "hierarchi": 14, "union": 14, "enum": 14, "constant": 14, "map": 14, "python": 15, "tmpl_enable_trac": 15, "tmpl_error_circular_includ": 15, "tmpl_error_divide_by_zero": 15, "tmpl_error_gi_failur": 15, "tmpl_error_invalid_op_cod": 15, "tmpl_error_invalid_st": 15, "tmpl_error_lexer_failur": 15, "tmpl_error_missing_symbol": 15, "tmpl_error_no_such_properti": 15, "tmpl_error_not_a_funct": 15, "tmpl_error_not_a_valu": 15, "tmpl_error_not_an_object": 15, "tmpl_error_not_impl": 15, "tmpl_error_null_point": 15, "tmpl_error_quark": 15, "tmpl_error_runtime_error": 15, "tmpl_error_symbol_redefin": 15, "tmpl_error_syntax_error": 15, "tmpl_error_template_not_found": 15, "tmpl_error_type_mismatch": 15, "tmpl_expr_add": 15, "tmpl_expr_and": 15, "tmpl_expr_anon_fn_cal": 15, "tmpl_expr_arg": 15, "tmpl_expr_boolean": 15, "tmpl_expr_builtin_ab": 15, "tmpl_expr_builtin_assert": 15, "tmpl_expr_builtin_cast_bool": 15, "tmpl_expr_builtin_cast_byt": 15, "tmpl_expr_builtin_cast_char": 15, "tmpl_expr_builtin_cast_doubl": 15, "tmpl_expr_builtin_cast_float": 15, "tmpl_expr_builtin_cast_i32": 15, "tmpl_expr_builtin_cast_i64": 15, "tmpl_expr_builtin_cast_u32": 15, "tmpl_expr_builtin_cast_u64": 15, "tmpl_expr_builtin_ceil": 15, "tmpl_expr_builtin_co": 15, "tmpl_expr_builtin_floor": 15, "tmpl_expr_builtin_hex": 15, "tmpl_expr_builtin_log": 15, "tmpl_expr_builtin_print": 15, "tmpl_expr_builtin_printerr": 15, "tmpl_expr_builtin_repr": 15, "tmpl_expr_builtin_sin": 15, "tmpl_expr_builtin_sqrt": 15, "tmpl_expr_builtin_tan": 15, "tmpl_expr_builtin_typeof": 15, "tmpl_expr_div": 15, "tmpl_expr_eq": 15, "tmpl_expr_ev": 15, "tmpl_expr_fn_cal": 15, "tmpl_expr_from_str": 15, "tmpl_expr_func": 15, "tmpl_expr_getattr": 15, "tmpl_expr_gi_cal": 15, "tmpl_expr_gt": 15, "tmpl_expr_if": 15, "tmpl_expr_invert_boolean": 15, "tmpl_expr_lt": 15, "tmpl_expr_mul": 15, "tmpl_expr_n": 15, "tmpl_expr_new_anon_cal": 15, "tmpl_expr_new_boolean": 15, "tmpl_expr_new_flow": 15, "tmpl_expr_new_fn_cal": 15, "tmpl_expr_new_func": 15, "tmpl_expr_new_getattr": 15, "tmpl_expr_new_gi_cal": 15, "tmpl_expr_new_invert_boolean": 15, "tmpl_expr_new_nop": 15, "tmpl_expr_new_nul": 15, "tmpl_expr_new_numb": 15, "tmpl_expr_new_requir": 15, "tmpl_expr_new_setattr": 15, "tmpl_expr_new_simpl": 15, "tmpl_expr_new_stmt_list": 15, "tmpl_expr_new_str": 15, "tmpl_expr_new_symbol_assign": 15, "tmpl_expr_new_symbol_ref": 15, "tmpl_expr_new_user_fn_cal": 15, "tmpl_expr_nop": 15, "tmpl_expr_nul": 15, "tmpl_expr_numb": 15, "tmpl_expr_or": 15, "tmpl_expr_ref": 15, "tmpl_expr_requir": 15, "tmpl_expr_setattr": 15, "tmpl_expr_stmt_list": 15, "tmpl_expr_str": 15, "tmpl_expr_sub": 15, "tmpl_expr_symbol_assign": 15, "tmpl_expr_symbol_ref": 15, "tmpl_expr_unary_minu": 15, "tmpl_expr_unref": 15, "tmpl_expr_user_fn_cal": 15, "tmpl_expr_whil": 15, "tmpl_log_level_trac": 15, "tmpl_major_vers": 15, "tmpl_micro_vers": 15, "tmpl_minor_vers": 15, "tmpl_scope_dup_str": 15, "tmpl_scope_get": 15, "tmpl_scope_list_symbol": 15, "tmpl_scope_new": 15, "tmpl_scope_new_with_par": 15, "tmpl_scope_peek": 15, "tmpl_scope_ref": 15, "tmpl_scope_requir": 15, "tmpl_scope_set": 15, "tmpl_scope_set_boolean": 15, "tmpl_scope_set_doubl": 15, "tmpl_scope_set_nul": 15, "tmpl_scope_set_object": 15, "tmpl_scope_set_resolv": 15, "tmpl_scope_set_str": 15, "tmpl_scope_set_strv": 15, "tmpl_scope_set_valu": 15, "tmpl_scope_set_vari": 15, "tmpl_scope_tak": 15, "tmpl_scope_unref": 15, "tmpl_symbol_assign_boolean": 15, "tmpl_symbol_assign_doubl": 15, "tmpl_symbol_assign_expr": 15, "unavail": 15, "tmpl_symbol_assign_object": 15, "tmpl_symbol_assign_str": 15, "tmpl_symbol_assign_strv": 15, "tmpl_symbol_assign_valu": 15, "tmpl_symbol_assign_vari": 15, "tmpl_symbol_expr": 15, "tmpl_symbol_get_box": 15, "tmpl_symbol_get_expr": 15, "tmpl_symbol_get_symbol_typ": 15, "tmpl_symbol_get_valu": 15, "tmpl_symbol_hold": 15, "tmpl_symbol_new": 15, "tmpl_symbol_ref": 15, "tmpl_symbol_unref": 15, "tmpl_symbol_valu": 15, "tmpl_template_expand": 15, "tmpl_template_expand_str": 15, "tmpl_template_get_loc": 15, "tmpl_template_locator_append_search_path": 15, "tmpl_template_locator_get_search_path": 15, "tmpl_template_locator_loc": 15, "tmpl_template_locator_new": 15, "tmpl_template_locator_prepend_search_path": 15, "tmpl_template_new": 15, "tmpl_template_pars": 15, "tmpl_template_parse_fil": 15, "tmpl_template_parse_path": 15, "tmpl_template_parse_resourc": 15, "tmpl_template_parse_str": 15, "tmpl_template_set_loc": 15, "tmpl_version_": 15, "tmplerror": 15, "tmplexpr": 15, "tmplexprbuiltin": 15, "tmplexprtyp": 15, "tmplscope": 15, "tmplscoperesolv": 15, "tmplsymbol": 15, "tmplsymboltyp": 15, "tmpltemplat": 15, "tmpltemplateclass": 15, "tmpltemplateloc": 15, "tmpltemplatelocatorclass": 15}, "objects": {"Template": [[10, 0, 1, "", "ENABLE_TRACE"], [11, 1, 1, "", "Error"], [3, 1, 1, "", "Expr"], [11, 1, 1, "", "ExprBuiltin"], [11, 1, 1, "", "ExprType"], [10, 0, 1, "", "LOG_LEVEL_TRACE"], [10, 0, 1, "", "MAJOR_VERSION"], [10, 0, 1, "", "MICRO_VERSION"], [10, 0, 1, "", "MINOR_VERSION"], [4, 1, 1, "", "Scope"], [0, 4, 1, "", "ScopeResolver"], [5, 1, 1, "", "Symbol"], [11, 1, 1, "", "SymbolType"], [6, 1, 1, "", "Template"], [7, 1, 1, "", "TemplateClass"], [8, 1, 1, "", "TemplateLocator"], [9, 1, 1, "", "TemplateLocatorClass"], [10, 0, 1, "", "VERSION_S"], [12, 4, 1, "", "error_quark"], [12, 4, 1, "", "expr_from_string"]], "Template.Error": [[11, 2, 1, "", "CIRCULAR_INCLUDE"], [11, 2, 1, "", "DIVIDE_BY_ZERO"], [11, 2, 1, "", "GI_FAILURE"], [11, 2, 1, "", "INVALID_OP_CODE"], [11, 2, 1, "", "INVALID_STATE"], [11, 2, 1, "", "LEXER_FAILURE"], [11, 2, 1, "", "MISSING_SYMBOL"], [11, 2, 1, "", "NOT_AN_OBJECT"], [11, 2, 1, "", "NOT_A_FUNCTION"], [11, 2, 1, "", "NOT_A_VALUE"], [11, 2, 1, "", "NOT_IMPLEMENTED"], [11, 2, 1, "", "NO_SUCH_PROPERTY"], [11, 2, 1, "", "NULL_POINTER"], [11, 2, 1, "", "RUNTIME_ERROR"], [11, 2, 1, "", "SYMBOL_REDEFINED"], [11, 2, 1, "", "SYNTAX_ERROR"], [11, 2, 1, "", "TEMPLATE_NOT_FOUND"], [11, 2, 1, "", "TYPE_MISMATCH"], [11, 3, 1, "", "quark"]], "Template.Expr": [[3, 3, 1, "", "eval"], [3, 3, 1, "", "from_string"], [3, 3, 1, "", "new_anon_call"], [3, 3, 1, "", "new_boolean"], [3, 3, 1, "", "new_flow"], [3, 3, 1, "", "new_fn_call"], [3, 3, 1, "", "new_func"], [3, 3, 1, "", "new_getattr"], [3, 3, 1, "", "new_gi_call"], [3, 3, 1, "", "new_invert_boolean"], [3, 3, 1, "", "new_nop"], [3, 3, 1, "", "new_null"], [3, 3, 1, "", "new_number"], [3, 3, 1, "", "new_require"], [3, 3, 1, "", "new_setattr"], [3, 3, 1, "", "new_simple"], [3, 3, 1, "", "new_stmt_list"], [3, 3, 1, "", "new_string"], [3, 3, 1, "", "new_symbol_assign"], [3, 3, 1, "", "new_symbol_ref"], [3, 3, 1, "", "new_user_fn_call"], [3, 3, 1, "", "ref"], [3, 3, 1, "", "unref"]], "Template.ExprBuiltin": [[11, 2, 1, "", "ABS"], [11, 2, 1, "", "ASSERT"], [11, 2, 1, "", "CAST_BOOL"], [11, 2, 1, "", "CAST_BYTE"], [11, 2, 1, "", "CAST_CHAR"], [11, 2, 1, "", "CAST_DOUBLE"], [11, 2, 1, "", "CAST_FLOAT"], [11, 2, 1, "", "CAST_I32"], [11, 2, 1, "", "CAST_I64"], [11, 2, 1, "", "CAST_U32"], [11, 2, 1, "", "CAST_U64"], [11, 2, 1, "", "CEIL"], [11, 2, 1, "", "COS"], [11, 2, 1, "", "FLOOR"], [11, 2, 1, "", "HEX"], [11, 2, 1, "", "LOG"], [11, 2, 1, "", "PRINT"], [11, 2, 1, "", "PRINTERR"], [11, 2, 1, "", "REPR"], [11, 2, 1, "", "SIN"], [11, 2, 1, "", "SQRT"], [11, 2, 1, "", "TAN"], [11, 2, 1, "", "TYPEOF"]], "Template.ExprType": [[11, 2, 1, "", "ADD"], [11, 2, 1, "", "AND"], [11, 2, 1, "", "ANON_FN_CALL"], [11, 2, 1, "", "ARGS"], [11, 2, 1, "", "BOOLEAN"], [11, 2, 1, "", "DIV"], [11, 2, 1, "", "EQ"], [11, 2, 1, "", "FN_CALL"], [11, 2, 1, "", "FUNC"], [11, 2, 1, "", "GETATTR"], [11, 2, 1, "", "GI_CALL"], [11, 2, 1, "", "GT"], [11, 2, 1, "", "GTE"], [11, 2, 1, "", "IF"], [11, 2, 1, "", "INVERT_BOOLEAN"], [11, 2, 1, "", "LT"], [11, 2, 1, "", "LTE"], [11, 2, 1, "", "MUL"], [11, 2, 1, "", "NE"], [11, 2, 1, "", "NOP"], [11, 2, 1, "", "NULL"], [11, 2, 1, "", "NUMBER"], [11, 2, 1, "", "OR"], [11, 2, 1, "", "REQUIRE"], [11, 2, 1, "", "SETATTR"], [11, 2, 1, "", "STMT_LIST"], [11, 2, 1, "", "STRING"], [11, 2, 1, "", "SUB"], [11, 2, 1, "", "SYMBOL_ASSIGN"], [11, 2, 1, "", "SYMBOL_REF"], [11, 2, 1, "", "UNARY_MINUS"], [11, 2, 1, "", "USER_FN_CALL"], [11, 2, 1, "", "WHILE"]], "Template.Scope": [[4, 3, 1, "", "dup_string"], [4, 3, 1, "", "get"], [4, 3, 1, "", "list_symbols"], [4, 3, 1, "", "new"], [4, 3, 1, "", "new_with_parent"], [4, 3, 1, "", "peek"], [4, 3, 1, "", "ref"], [4, 3, 1, "", "require"], [4, 3, 1, "", "set"], [4, 3, 1, "", "set_boolean"], [4, 3, 1, "", "set_double"], [4, 3, 1, "", "set_null"], [4, 3, 1, "", "set_object"], [4, 3, 1, "", "set_resolver"], [4, 3, 1, "", "set_string"], [4, 3, 1, "", "set_strv"], [4, 3, 1, "", "set_value"], [4, 3, 1, "", "set_variant"], [4, 3, 1, "", "take"], [4, 3, 1, "", "unref"]], "Template.Symbol": [[5, 3, 1, "", "assign_boolean"], [5, 3, 1, "", "assign_double"], [5, 3, 1, "", "assign_object"], [5, 3, 1, "", "assign_string"], [5, 3, 1, "", "assign_strv"], [5, 3, 1, "", "assign_value"], [5, 3, 1, "", "assign_variant"], [5, 3, 1, "", "get_boxed"], [5, 3, 1, "", "get_expr"], [5, 3, 1, "", "get_symbol_type"], [5, 3, 1, "", "get_value"], [5, 3, 1, "", "holds"], [5, 3, 1, "", "new"], [5, 3, 1, "", "ref"], [5, 3, 1, "", "unref"]], "Template.SymbolType": [[11, 2, 1, "", "EXPR"], [11, 2, 1, "", "VALUE"]], "Template.Template": [[6, 3, 1, "", "expand"], [6, 3, 1, "", "expand_string"], [6, 3, 1, "", "get_locator"], [6, 3, 1, "", "new"], [6, 3, 1, "", "parse"], [6, 3, 1, "", "parse_file"], [6, 3, 1, "", "parse_path"], [6, 3, 1, "", "parse_resource"], [6, 3, 1, "", "parse_string"], [6, 3, 1, "", "set_locator"]], "Template.Template.props": [[6, 0, 1, "", "locator"]], "Template.TemplateLocator": [[8, 3, 1, "", "append_search_path"], [8, 3, 1, "", "do_locate"], [8, 3, 1, "", "get_search_path"], [8, 3, 1, "", "locate"], [8, 3, 1, "", "new"], [8, 3, 1, "", "prepend_search_path"]]}, "objtypes": {"0": "py:data", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function"}, "objnames": {"0": ["py", "data", "Python data"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "titleterms": {"callback": 0, "detail": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "class": [1, 2, 6, 8], "structur": [1, 16], "templat": [3, 4, 5, 6, 7, 8, 9, 14], "expr": 3, "field": [3, 4, 5, 6, 7, 8, 9], "method": [3, 4, 5, 6, 7, 8, 9], "scope": 4, "symbol": [5, 15], "virtual": [6, 8], "properti": [6, 8], "signal": [6, 8], "templateclass": 7, "templateloc": 8, "templatelocatorclass": 9, "constant": 10, "enum": 11, "function": 12, "hierarchi": 13, "1": 14, "0": 14, "3": 14, "36": 14, "api": 14, "map": 15, "union": 17}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Callbacks": [[0, "callbacks"]], "Details": [[0, "details"], [3, "details"], [4, "details"], [5, "details"], [7, "details"], [9, "details"], [10, "details"], [11, "details"], [12, "details"]], "Class Structures": [[1, "class-structures"]], "Classes": [[2, "classes"]], "Template.Expr": [[3, "template-expr"]], "Fields": [[3, "fields"], [4, "fields"], [5, "fields"], [6, "fields"], [7, "fields"], [8, "fields"], [9, "fields"]], "Methods": [[3, "methods"], [4, "methods"], [5, "methods"], [6, "methods"], [7, "methods"], [8, "methods"], [9, "methods"]], "Template.Scope": [[4, "template-scope"]], "Template.Symbol": [[5, "template-symbol"]], "Template.Template": [[6, "template-template"]], "Virtual Methods": [[6, "virtual-methods"], [8, "virtual-methods"]], "Properties": [[6, "properties"], [8, "properties"]], "Signals": [[6, "signals"], [8, "signals"]], "Class Details": [[6, "class-details"], [8, "class-details"]], "Property Details": [[6, "property-details"]], "Template.TemplateClass": [[7, "template-templateclass"]], "Template.TemplateLocator": [[8, "template-templatelocator"]], "Template.TemplateLocatorClass": [[9, "template-templatelocatorclass"]], "Constants": [[10, "constants"]], "Enums": [[11, "enums"]], "Functions": [[12, "functions"]], "Hierarchy": [[13, "hierarchy"]], "Template 1.0 (3.36.1)": [[14, "template-1-0-3-36-1"]], "API": [[14, "api"]], "Symbol Mapping": [[15, "symbol-mapping"]], "Structures": [[16, "structures"]], "Unions": [[17, "unions"]]}, "indexentries": {"template.scoperesolver()": [[0, "Template.ScopeResolver"]], "built-in function": [[0, "Template.ScopeResolver"], [12, "Template.error_quark"], [12, "Template.expr_from_string"]], "template.expr (built-in class)": [[3, "Template.Expr"]], "eval() (template.expr method)": [[3, "Template.Expr.eval"]], "from_string() (template.expr class method)": [[3, "Template.Expr.from_string"]], "new_anon_call() (template.expr method)": [[3, "Template.Expr.new_anon_call"]], "new_boolean() (template.expr class method)": [[3, "Template.Expr.new_boolean"]], "new_flow() (template.expr class method)": [[3, "Template.Expr.new_flow"]], "new_fn_call() (template.expr class method)": [[3, "Template.Expr.new_fn_call"]], "new_func() (template.expr class method)": [[3, "Template.Expr.new_func"]], "new_getattr() (template.expr method)": [[3, "Template.Expr.new_getattr"]], "new_gi_call() (template.expr method)": [[3, "Template.Expr.new_gi_call"]], "new_invert_boolean() (template.expr method)": [[3, "Template.Expr.new_invert_boolean"]], "new_nop() (template.expr class method)": [[3, "Template.Expr.new_nop"]], "new_null() (template.expr class method)": [[3, "Template.Expr.new_null"]], "new_number() (template.expr class method)": [[3, "Template.Expr.new_number"]], "new_require() (template.expr class method)": [[3, "Template.Expr.new_require"]], "new_setattr() (template.expr method)": [[3, "Template.Expr.new_setattr"]], "new_simple() (template.expr class method)": [[3, "Template.Expr.new_simple"]], "new_stmt_list() (template.expr class method)": [[3, "Template.Expr.new_stmt_list"]], "new_string() (template.expr class method)": [[3, "Template.Expr.new_string"]], "new_symbol_assign() (template.expr class method)": [[3, "Template.Expr.new_symbol_assign"]], "new_symbol_ref() (template.expr class method)": [[3, "Template.Expr.new_symbol_ref"]], "new_user_fn_call() (template.expr class method)": [[3, "Template.Expr.new_user_fn_call"]], "ref() (template.expr method)": [[3, "Template.Expr.ref"]], "unref() (template.expr method)": [[3, "Template.Expr.unref"]], "template.scope (built-in class)": [[4, "Template.Scope"]], "dup_string() (template.scope method)": [[4, "Template.Scope.dup_string"]], "get() (template.scope method)": [[4, "Template.Scope.get"]], "list_symbols() (template.scope method)": [[4, "Template.Scope.list_symbols"]], "new() (template.scope class method)": [[4, "Template.Scope.new"]], "new_with_parent() (template.scope method)": [[4, "Template.Scope.new_with_parent"]], "peek() (template.scope method)": [[4, "Template.Scope.peek"]], "ref() (template.scope method)": [[4, "Template.Scope.ref"]], "require() (template.scope method)": [[4, "Template.Scope.require"]], "set() (template.scope method)": [[4, "Template.Scope.set"]], "set_boolean() (template.scope method)": [[4, "Template.Scope.set_boolean"]], "set_double() (template.scope method)": [[4, "Template.Scope.set_double"]], "set_null() (template.scope method)": [[4, "Template.Scope.set_null"]], "set_object() (template.scope method)": [[4, "Template.Scope.set_object"]], "set_resolver() (template.scope method)": [[4, "Template.Scope.set_resolver"]], "set_string() (template.scope method)": [[4, "Template.Scope.set_string"]], "set_strv() (template.scope method)": [[4, "Template.Scope.set_strv"]], "set_value() (template.scope method)": [[4, "Template.Scope.set_value"]], "set_variant() (template.scope method)": [[4, "Template.Scope.set_variant"]], "take() (template.scope method)": [[4, "Template.Scope.take"]], "unref() (template.scope method)": [[4, "Template.Scope.unref"]], "template.symbol (built-in class)": [[5, "Template.Symbol"]], "assign_boolean() (template.symbol method)": [[5, "Template.Symbol.assign_boolean"]], "assign_double() (template.symbol method)": [[5, "Template.Symbol.assign_double"]], "assign_object() (template.symbol method)": [[5, "Template.Symbol.assign_object"]], "assign_string() (template.symbol method)": [[5, "Template.Symbol.assign_string"]], "assign_strv() (template.symbol method)": [[5, "Template.Symbol.assign_strv"]], "assign_value() (template.symbol method)": [[5, "Template.Symbol.assign_value"]], "assign_variant() (template.symbol method)": [[5, "Template.Symbol.assign_variant"]], "get_boxed() (template.symbol method)": [[5, "Template.Symbol.get_boxed"]], "get_expr() (template.symbol method)": [[5, "Template.Symbol.get_expr"]], "get_symbol_type() (template.symbol method)": [[5, "Template.Symbol.get_symbol_type"]], "get_value() (template.symbol method)": [[5, "Template.Symbol.get_value"]], "holds() (template.symbol method)": [[5, "Template.Symbol.holds"]], "new() (template.symbol class method)": [[5, "Template.Symbol.new"]], "ref() (template.symbol method)": [[5, "Template.Symbol.ref"]], "unref() (template.symbol method)": [[5, "Template.Symbol.unref"]], "template.template (built-in class)": [[6, "Template.Template"]], "template.template.props.locator (built-in variable)": [[6, "Template.Template.props.locator"]], "expand() (template.template method)": [[6, "Template.Template.expand"]], "expand_string() (template.template method)": [[6, "Template.Template.expand_string"]], "get_locator() (template.template method)": [[6, "Template.Template.get_locator"]], "new() (template.template class method)": [[6, "Template.Template.new"]], "parse() (template.template method)": [[6, "Template.Template.parse"]], "parse_file() (template.template method)": [[6, "Template.Template.parse_file"]], "parse_path() (template.template method)": [[6, "Template.Template.parse_path"]], "parse_resource() (template.template method)": [[6, "Template.Template.parse_resource"]], "parse_string() (template.template method)": [[6, "Template.Template.parse_string"]], "set_locator() (template.template method)": [[6, "Template.Template.set_locator"]], "template.templateclass (built-in class)": [[7, "Template.TemplateClass"]], "template.templatelocator (built-in class)": [[8, "Template.TemplateLocator"]], "append_search_path() (template.templatelocator method)": [[8, "Template.TemplateLocator.append_search_path"]], "do_locate() (template.templatelocator method)": [[8, "Template.TemplateLocator.do_locate"]], "get_search_path() (template.templatelocator method)": [[8, "Template.TemplateLocator.get_search_path"]], "locate() (template.templatelocator method)": [[8, "Template.TemplateLocator.locate"]], "new() (template.templatelocator class method)": [[8, "Template.TemplateLocator.new"]], "prepend_search_path() (template.templatelocator method)": [[8, "Template.TemplateLocator.prepend_search_path"]], "template.templatelocatorclass (built-in class)": [[9, "Template.TemplateLocatorClass"]], "template.enable_trace (built-in variable)": [[10, "Template.ENABLE_TRACE"]], "template.log_level_trace (built-in variable)": [[10, "Template.LOG_LEVEL_TRACE"]], "template.major_version (built-in variable)": [[10, "Template.MAJOR_VERSION"]], "template.micro_version (built-in variable)": [[10, "Template.MICRO_VERSION"]], "template.minor_version (built-in variable)": [[10, "Template.MINOR_VERSION"]], "template.version_s (built-in variable)": [[10, "Template.VERSION_S"]], "abs (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.ABS"]], "add (template.exprtype attribute)": [[11, "Template.ExprType.ADD"]], "and (template.exprtype attribute)": [[11, "Template.ExprType.AND"]], "anon_fn_call (template.exprtype attribute)": [[11, "Template.ExprType.ANON_FN_CALL"]], "args (template.exprtype attribute)": [[11, "Template.ExprType.ARGS"]], "assert (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.ASSERT"]], "boolean (template.exprtype attribute)": [[11, "Template.ExprType.BOOLEAN"]], "cast_bool (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.CAST_BOOL"]], "cast_byte (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.CAST_BYTE"]], "cast_char (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.CAST_CHAR"]], "cast_double (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.CAST_DOUBLE"]], "cast_float (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.CAST_FLOAT"]], "cast_i32 (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.CAST_I32"]], "cast_i64 (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.CAST_I64"]], "cast_u32 (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.CAST_U32"]], "cast_u64 (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.CAST_U64"]], "ceil (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.CEIL"]], "circular_include (template.error attribute)": [[11, "Template.Error.CIRCULAR_INCLUDE"]], "cos (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.COS"]], "div (template.exprtype attribute)": [[11, "Template.ExprType.DIV"]], "divide_by_zero (template.error attribute)": [[11, "Template.Error.DIVIDE_BY_ZERO"]], "eq (template.exprtype attribute)": [[11, "Template.ExprType.EQ"]], "expr (template.symboltype attribute)": [[11, "Template.SymbolType.EXPR"]], "floor (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.FLOOR"]], "fn_call (template.exprtype attribute)": [[11, "Template.ExprType.FN_CALL"]], "func (template.exprtype attribute)": [[11, "Template.ExprType.FUNC"]], "getattr (template.exprtype attribute)": [[11, "Template.ExprType.GETATTR"]], "gi_call (template.exprtype attribute)": [[11, "Template.ExprType.GI_CALL"]], "gi_failure (template.error attribute)": [[11, "Template.Error.GI_FAILURE"]], "gt (template.exprtype attribute)": [[11, "Template.ExprType.GT"]], "gte (template.exprtype attribute)": [[11, "Template.ExprType.GTE"]], "hex (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.HEX"]], "if (template.exprtype attribute)": [[11, "Template.ExprType.IF"]], "invalid_op_code (template.error attribute)": [[11, "Template.Error.INVALID_OP_CODE"]], "invalid_state (template.error attribute)": [[11, "Template.Error.INVALID_STATE"]], "invert_boolean (template.exprtype attribute)": [[11, "Template.ExprType.INVERT_BOOLEAN"]], "lexer_failure (template.error attribute)": [[11, "Template.Error.LEXER_FAILURE"]], "log (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.LOG"]], "lt (template.exprtype attribute)": [[11, "Template.ExprType.LT"]], "lte (template.exprtype attribute)": [[11, "Template.ExprType.LTE"]], "missing_symbol (template.error attribute)": [[11, "Template.Error.MISSING_SYMBOL"]], "mul (template.exprtype attribute)": [[11, "Template.ExprType.MUL"]], "ne (template.exprtype attribute)": [[11, "Template.ExprType.NE"]], "nop (template.exprtype attribute)": [[11, "Template.ExprType.NOP"]], "not_an_object (template.error attribute)": [[11, "Template.Error.NOT_AN_OBJECT"]], "not_a_function (template.error attribute)": [[11, "Template.Error.NOT_A_FUNCTION"]], "not_a_value (template.error attribute)": [[11, "Template.Error.NOT_A_VALUE"]], "not_implemented (template.error attribute)": [[11, "Template.Error.NOT_IMPLEMENTED"]], "no_such_property (template.error attribute)": [[11, "Template.Error.NO_SUCH_PROPERTY"]], "null (template.exprtype attribute)": [[11, "Template.ExprType.NULL"]], "null_pointer (template.error attribute)": [[11, "Template.Error.NULL_POINTER"]], "number (template.exprtype attribute)": [[11, "Template.ExprType.NUMBER"]], "or (template.exprtype attribute)": [[11, "Template.ExprType.OR"]], "print (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.PRINT"]], "printerr (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.PRINTERR"]], "repr (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.REPR"]], "require (template.exprtype attribute)": [[11, "Template.ExprType.REQUIRE"]], "runtime_error (template.error attribute)": [[11, "Template.Error.RUNTIME_ERROR"]], "setattr (template.exprtype attribute)": [[11, "Template.ExprType.SETATTR"]], "sin (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.SIN"]], "sqrt (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.SQRT"]], "stmt_list (template.exprtype attribute)": [[11, "Template.ExprType.STMT_LIST"]], "string (template.exprtype attribute)": [[11, "Template.ExprType.STRING"]], "sub (template.exprtype attribute)": [[11, "Template.ExprType.SUB"]], "symbol_assign (template.exprtype attribute)": [[11, "Template.ExprType.SYMBOL_ASSIGN"]], "symbol_redefined (template.error attribute)": [[11, "Template.Error.SYMBOL_REDEFINED"]], "symbol_ref (template.exprtype attribute)": [[11, "Template.ExprType.SYMBOL_REF"]], "syntax_error (template.error attribute)": [[11, "Template.Error.SYNTAX_ERROR"]], "tan (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.TAN"]], "template_not_found (template.error attribute)": [[11, "Template.Error.TEMPLATE_NOT_FOUND"]], "typeof (template.exprbuiltin attribute)": [[11, "Template.ExprBuiltin.TYPEOF"]], "type_mismatch (template.error attribute)": [[11, "Template.Error.TYPE_MISMATCH"]], "template.error (built-in class)": [[11, "Template.Error"]], "template.exprbuiltin (built-in class)": [[11, "Template.ExprBuiltin"]], "template.exprtype (built-in class)": [[11, "Template.ExprType"]], "template.symboltype (built-in class)": [[11, "Template.SymbolType"]], "unary_minus (template.exprtype attribute)": [[11, "Template.ExprType.UNARY_MINUS"]], "user_fn_call (template.exprtype attribute)": [[11, "Template.ExprType.USER_FN_CALL"]], "value (template.symboltype attribute)": [[11, "Template.SymbolType.VALUE"]], "while (template.exprtype attribute)": [[11, "Template.ExprType.WHILE"]], "quark() (template.error class method)": [[11, "Template.Error.quark"]], "template.error_quark()": [[12, "Template.error_quark"]], "template.expr_from_string()": [[12, "Template.expr_from_string"]]}})